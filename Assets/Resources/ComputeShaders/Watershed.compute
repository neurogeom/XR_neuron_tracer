// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RegionGrow
#pragma kernel UpdateValue

#define ACTIVE 0
#define SOURCE 1
#define FAR 2
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<int> region;
RWStructuredBuffer<int> state;
AppendStructuredBuffer<int> sourceSet;
Texture3D<float> cut;
int threshold;
int3 dim;

uint PosToIndex(uint3 pos)
{
    uint index = pos.x + pos.y * dim.x + pos.z * dim.x * dim.y;
    return index;
}

uint3 IndexToPos(uint index)
{
    uint x = index % dim.x;
    uint y = (index / dim.x) % dim.y;
    uint z = (index / dim.x / dim.y) % dim.z;
    return uint3(x, y, z);
}

[numthreads(4,4,4)]
void RegionGrow (uint3 id : SV_DispatchThreadID)
{
	if(cut[id] >= threshold/255.0f && state[PosToIndex(id)] == FAR)
	{
        bool isAdjacent = false;
        for (int i = -1; i <= 1; i++)
        {
            int x2 = (int)id.x + i;
            if (x2 < 0 || x2 >= (int) dim.x) continue;
            for (int j = -1; j <= 1; j++)
            {
                int y2 = (int) id.y + j;
                if (y2 < 0 || y2 >= (int) dim.y) continue;
                for (int k = -1; k <= 1; k++)
                {
                    int z2 = (int) id.z + k;
                    if (z2 < 0 || z2 >= (int) dim.z) continue;
                    uint3 id2 = uint3(x2,y2,z2);
                    isAdjacent = isAdjacent || state[PosToIndex(id2)]==ACTIVE;
                }
            }
        }
        
        if (isAdjacent)
        {
            uint index = PosToIndex(id); 
            state[index] = SOURCE;
            sourceSet.Append(index);
        }
	}
}

[numthreads(4,4,4)]
void UpdateValue (uint3 id : SV_DispatchThreadID)
{
	if(state[PosToIndex(id)]==SOURCE)
	{
        if (region[PosToIndex(id)] == 0)
        {
            int regionID = 0;
            for (int i = -1; i <= 1; i++)
            {
                int x2 = (int)id.x + i;
                if (x2 < 0 || x2 >= (int) dim.x)
                    continue;
                for (int j = -1; j <= 1; j++)
                {
                    int y2 = (int) id.y + j;
                    if (y2 < 0 || y2 >= (int) dim.y)
                        continue;
                    for (int k = -1; k <= 1; k++)
                    {
                        int z2 = (int) id.z + k;
                        if (z2 < 0 || z2 >= (int) dim.z)
                            continue;
                        uint3 id2 = uint3(x2, y2, z2);
                        if(regionID > 0 && regionID != region[PosToIndex(id2)]) regionID = -1;
                        else if(regionID == 0 && regionID != region[PosToIndex(id2)]) regionID = region[PosToIndex(id2)];
                    }
                }
            }
            region[PosToIndex(id)] = regionID;
        }
        state[PosToIndex(id)] = ACTIVE;
	}
}
